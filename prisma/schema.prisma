// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // Enable Prisma Accelerate
  directUrl = env("DIRECT_URL")
}

model Site {
  id               String        @id @default(cuid())
  name             String
  url              String
  status           String        @default("checking")
  successfulChecks Int           @default(0)
  totalChecks      Int           @default(0)
  responseTime     Int           @default(0)
  userId           String
  user             User          @relation(fields: [userId], references: [id])
  checks           StatusCheck[] // This line must exist
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  lastChecked      DateTime?
  nextCheckAt      DateTime?
}

model StatusCheck {
  id           String   @id @default(cuid())
  siteId       String
  status       String
  responseTime Int
  timestamp    DateTime @default(now())
  statusCode   Int?
  headers      Json?
  sslInfo      Json?
  dnsInfo      Json?
  error        String?
  site         Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([siteId])
  @@index([timestamp])
}

model User {
  id                 String    @id @default(cuid())
  name               String?
  email              String?   @unique
  password           String?
  emailVerified      DateTime?
  verificationToken  String?   @unique
  verificationExpiry DateTime?
  resetToken         String?   @unique
  resetTokenExpiry   DateTime?
  rememberToken      String?   @unique
  lastLogin          DateTime?
  loginAttempts      Int       @default(0)
  lockedUntil        DateTime?
  role               String    @default("user")
  image              String?
  sites              Site[]
  accounts           Account[]
  sessions           Session[]
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@index([email])
  @@index([verificationToken])
  @@index([resetToken])
  @@index([rememberToken])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Add new model for tracking login attempts
model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ip        String
  userAgent String?
  success   Boolean
  createdAt DateTime @default(now())

  @@index([email])
  @@index([ip])
  @@index([createdAt])
}

// Add new model for account activity logging
model AccountActivity {
  id          String   @id @default(cuid())
  userId      String
  action      String
  ip          String?
  userAgent   String?
  description String?
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
